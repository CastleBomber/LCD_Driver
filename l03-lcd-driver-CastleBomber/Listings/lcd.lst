


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ***********************
    2 00000000         ; CS 107: Computer Architecture and Organization
    3 00000000         ;
    4 00000000         ; Project: L03_LCD
    5 00000000         ; Filename: lcd.s
    6 00000000         ; Author: Leonard Euler
    7 00000000         ;
    8 00000000         ; Editor: Richie Romero Castillo
    9 00000000         ; Semester: Spring 2019
   10 00000000         ; token/ password: 2ab4e29a2247cbc29c9445a33fc7e501827bd
                       c29 
   11 00000000         ;
   12 00000000         ; Description: 
   13 00000000         ; This is the driver routines for the LCD Keypad Shield.
                        
   14 00000000         ; The pinouts for board are as follows:
   15 00000000         ;
   16 00000000         ;  | LCD Hardware | Arduino Pin | LPC 4088 Port |
   17 00000000         ;  |:------------:|:-----------:|:-------------:|
   18 00000000         ;  |     D4       |     D4      |      P0.5     |
   19 00000000         ;  |     D5       |     D5      |      P5.0     |
   20 00000000         ;  |     D6       |     D6      |      P5.1     |
   21 00000000         ;  |     D7       |     D7      |      P0.4     |
   22 00000000         ;  |     RS       |     D8      |      P5.3     |
   23 00000000         ;  |     E        |     D9      |      P5.4     |
   24 00000000         ;  |  Backlight   |    D10      |      P0.6     |
   25 00000000         ;  |  Buttons     |    A0       |      P0.23    |
   26 00000000         ;
   27 00000000         ;*******************************************************
                       ***********************  
   28 00000000 00000001 
                       BACKLIGHT_ON
                               EQU              0x01
   29 00000000 00000000 
                       BACKLIGHT_OFF
                               EQU              0x00
   30 00000000 00000000 
                       SET_LOW EQU              0x00
   31 00000000 00000001 
                       SET_HIGH
                               EQU              0x01
   32 00000000         
   33 00000000 20098000 
                       GPIO_BASE
                               EQU              0x20098000
   34 00000000 00000018 
                       SET0    EQU              0x018
   35 00000000 0000001C 
                       CLR0    EQU              0x01C
   36 00000000 0000003C 
                       CLR1    EQU              0x03C
   37 00000000 000000B8 
                       SET5    EQU              0x0B8
   38 00000000 000000BC 
                       CLR5    EQU              0x0BC
   39 00000000         
   40 00000000         ; my EQU's
   41 00000000 00000000 



ARM Macro Assembler    Page 2 


                       DIR0    EQU              0x000       ; GPIO Port0 Direct
                                                            ion control registe
                                                            r
   42 00000000 000000A0 
                       DIR5    EQU              0x0A0       ; GPIO Port5 
   43 00000000         
   44 00000000                 AREA             LCDCODE, CODE
   45 00000000                 IMPORT           DELAY_1_MS
   46 00000000                 IMPORT           DELAY_2_MS
   47 00000000                 IMPORT           DELAY_5_MS
   48 00000000                 IMPORT           DELAY_15_MS
   49 00000000                 IMPORT           DELAY_20_MS
   50 00000000         
   51 00000000         ;*******************************************************
                       ***********************  
   52 00000000         ; Initializes the LCD hardware. 
   53 00000000         ;
   54 00000000         ; void LCD_INIT()
   55 00000000         ;
   56 00000000         ; D4 - D7 are I/O, RS, E, RW, && backlight 
   57 00000000         ; are digital I/O outputs only.
   58 00000000         ;
   59 00000000         ; All I/O pins are outputs because 
   60 00000000         ; the LCD Keypad Shield has the R/W* pin grounded
   61 00000000         ; so you can only write to it. 
   62 00000000         ;
   63 00000000         ; Once the pins (&& ports) are setup 
   64 00000000         ; you need to program a sequence 
   65 00000000         ; based on the one shown in Figure 24 (pg46).
   66 00000000         ;
   67 00000000         ; Fun fact: MOVW must be FIRST, then MOVT SECOND
   68 00000000         ;*******************************************************
                       ***********************  
   69 00000000         LCD_INIT
                               PROC
   70 00000000                 EXPORT           LCD_INIT     [WEAK]
   71 00000000         
   72 00000000 B53F            PUSH             {r0-r5, LR}
   73 00000002         
   74 00000002 F7FF FFFE       BL               DELAY_20_MS
   75 00000006 F7FF FFFE       BL               DELAY_20_MS
   76 0000000A         
   77 0000000A F04F 0000       LDR              r0, =0x0    ; FUNC: 000 - Digit
                                                            al I/O pin
   78 0000000E         ; MODE:  00 - No pullup/pulldown
   79 0000000E         ; IOCON reg -> GPIO reg, done @ bit-banded aliases
   80 0000000E         
   81 0000000E         ; >> Configure IOCON << ;
   82 0000000E 4980            LDR              r1, =0x4002C014 ; D4 ~ P0[5]: 0
                                                            x4002 C014
   83 00000010 4A80            LDR              r2, =0x4002C280 ; D5 ~ P5[0]: 0
                                                            x4002 C280
   84 00000012 4B81            LDR              r3, =0x4002C284 ; D6 ~ P5[1]: 0
                                                            x4002 C284
   85 00000014 4C81            LDR              r4, =0x4002C010 ; D7 ~ P0[4]: 0
                                                            x4002 C010
   86 00000016 6008            STR              r0, [r1]
   87 00000018 6010            STR              r0, [r2]
   88 0000001A 6018            STR              r0, [r3]



ARM Macro Assembler    Page 3 


   89 0000001C 6020            STR              r0, [r4]
   90 0000001E         
   91 0000001E 4980            LDR              r1, =0x4002C28C ; RS ~ P5[3]: 0
                                                            x4002 C28C
   92 00000020 4A80            LDR              r2, =0x4002C290 ; E ~ P5[4]: 0x
                                                            4002 C290 (Type I)
   93 00000022 4B81            LDR              r3, =0x4002C018 ; Backlight ~ P
                                                            0[6]: 0x4002 C018
   94 00000024 4C81            LDR              r4, =0x4002C05C ; Buttons ~ P0[
                                                            23]: 0x4002 C05C
   95 00000026 6008            STR              r0, [r1]
   96 00000028 6010            STR              r0, [r2]
   97 0000002A 6018            STR              r0, [r3]
   98 0000002C 6020            STR              r0, [r4]
   99 0000002E         
  100 0000002E 4980            LDR              r1, =GPIO_BASE ; >> Configure P
                                                            ort DIR << ;
  101 00000030 4880            LDR              r0, =0x800070
  102 00000032 6008            STR              r0, [r1, #DIR0] ; sets P0[4,5,6
                                                            , 23] as OUTPUT
  103 00000034 F04F 001B       LDR              r0, =0x1B
  104 00000038 F8C1 00A0       STR              r0, [r1, #DIR5] ; sets P5[0,1,3
                                                            ,4] as OUTPUT
  105 0000003C         
  106 0000003C F7FF FFFE       BL               DELAY_20_MS
  107 00000040         
  108 00000040 F04F 0403       LDR              r4, =0x03   ; >> Function Set (
                                                            I/F 8 bits) << ;
  109 00000044 B410            PUSH             {r4}
  110 00000046 F7FF FFFE       BL               WRITE_COMMAND
  111 0000004A BC10            POP              {r4}
  112 0000004C F7FF FFFE       BL               DELAY_15_MS
  113 00000050         
  114 00000050 F04F 0403       LDR              r4, =0x03
  115 00000054 B410            PUSH             {r4}
  116 00000056 F7FF FFFE       BL               WRITE_COMMAND
  117 0000005A BC10            POP              {r4}
  118 0000005C F7FF FFFE       BL               DELAY_15_MS
  119 00000060         
  120 00000060 F04F 0403       LDR              r4, =0x03
  121 00000064 B410            PUSH             {r4}
  122 00000066 F7FF FFFE       BL               WRITE_COMMAND
  123 0000006A BC10            POP              {r4}
  124 0000006C F7FF FFFE       BL               DELAY_15_MS
  125 00000070         
  126 00000070 F04F 0402       LDR              r4, =0x02
  127 00000074 B410            PUSH             {r4}
  128 00000076 F7FF FFFE       BL               WRITE_COMMAND
  129 0000007A BC10            POP              {r4}
  130 0000007C F7FF FFFE       BL               DELAY_15_MS
  131 00000080         
  132 00000080 F04F 0428       LDR              r4, =0x28
  133 00000084 B410            PUSH             {r4}
  134 00000086 F7FF FFFE       BL               WRITE_COMMAND
  135 0000008A BC10            POP              {r4}
  136 0000008C F7FF FFFE       BL               DELAY_15_MS
  137 00000090         
  138 00000090         ;LDR  r4, =0x08
  139 00000090 F04F 040F       LDR              r4, =0x0F   ; why???



ARM Macro Assembler    Page 4 


  140 00000094 B410            PUSH             {r4}
  141 00000096 F7FF FFFE       BL               WRITE_COMMAND
  142 0000009A BC10            POP              {r4}
  143 0000009C F7FF FFFE       BL               DELAY_15_MS
  144 000000A0         
  145 000000A0 F04F 0401       LDR              r4, =0x01
  146 000000A4 B410            PUSH             {r4}
  147 000000A6 F7FF FFFE       BL               WRITE_COMMAND
  148 000000AA BC10            POP              {r4}
  149 000000AC F7FF FFFE       BL               DELAY_15_MS
  150 000000B0         
  151 000000B0 F04F 0406       LDR              r4, =0x06
  152 000000B4 B410            PUSH             {r4}
  153 000000B6 F7FF FFFE       BL               WRITE_COMMAND
  154 000000BA BC10            POP              {r4}
  155 000000BC F7FF FFFE       BL               DELAY_15_MS
  156 000000C0         
  157 000000C0         
  158 000000C0         
  159 000000C0 BD3F            POP              {r0-r5, PC}
  160 000000C2         
  161 000000C2                 ENDP
  162 000000C2         
  163 000000C2         ;*******************************************************
                       ***********************  
  164 000000C2         ; Writes a string to the 1st || 2nd line of LCD Keypad S
                       hield.
  165 000000C2         ;
  166 000000C2         ; void WRITE_CSTRING(uchar_32 line, char *string)
  167 000000C2         ;
  168 000000C2         ; r4 contains 
  169 000000C2         ;    which line with 0 being the top line && 
  170 000000C2         ;       1 the bottom. 
  171 000000C2         ;
  172 000000C2         ; r5 contains
  173 000000C2         ;    the address of the 1st character to be output. 
  174 000000C2         ;
  175 000000C2         ; When writing a character 
  176 000000C2         ; be sure to wait 2 ms b/n characters.
  177 000000C2         ;*******************************************************
                       ***********************  
  178 000000C2         WRITE_CSTRING
                               PROC
  179 000000C2                 EXPORT           WRITE_CSTRING     [WEAK]
  180 000000C2         
  181 000000C2 B53F            PUSH             {r0-r5, LR}
  182 000000C4         
  183 000000C4 F04F 0100       LDR              r1, =0x0    ; position throught
                                                             lines
  184 000000C8 2C00            CMP              r4, #0
  185 000000CA BF0C 2480       MOVEQ            r4, #0x80   ; why???
  186 000000CE 24C0            MOVNE            r4, #0xC0   ; why???
  187 000000D0 B410            PUSH             {r4}
  188 000000D2 F7FF FFFE       BL               DELAY_2_MS
  189 000000D6 F7FF FFFE       BL               WRITE_COMMAND
  190 000000DA F7FF FFFE       BL               DELAY_2_MS
  191 000000DE BC10            POP              {r4}
  192 000000E0         
  193 000000E0         first_line



ARM Macro Assembler    Page 5 


  194 000000E0 5C6C            LDRB             r4, [r5, r1] ; r4 holds char (b
                                                            yte)
  195 000000E2 B410            PUSH             {r4}
  196 000000E4 F7FF FFFE       BL               DELAY_2_MS
  197 000000E8 F7FF FFFE       BL               WRITE_DATA
  198 000000EC F7FF FFFE       BL               DELAY_2_MS
  199 000000F0 BC10            POP              {r4}
  200 000000F2 B114            CBZ              r4, OUT
  201 000000F4 F101 0101       ADD              r1, r1, #1
  202 000000F8 E7F2            B                first_line
  203 000000FA         
  204 000000FA         ;second_line
  205 000000FA         ;LDRB r4, [r5, r1]
  206 000000FA         ;BL  WRITE_COMMAND
  207 000000FA         ;B  DELAY_2_MS
  208 000000FA         ;CBZ  r4, OUT
  209 000000FA         ;ADD  r1, r1, #1
  210 000000FA         ;B  second_line
  211 000000FA         
  212 000000FA         OUT
  213 000000FA BD3F            POP              {r0-r5, PC}
  214 000000FC         
  215 000000FC                 ENDP
  216 000000FC         
  217 000000FC         
  218 000000FC         ;*******************************************************
                       ***********************  
  219 000000FC         ; Writes a command byte to the LCD Keypad Shield
  220 000000FC         ;
  221 000000FC         ; void WRITE_COMMAND(uint_32 value)
  222 000000FC         ;    ~similar to write_data
  223 000000FC         ;
  224 000000FC         ; r4 contains
  225 000000FC         ;   the value to write. 
  226 000000FC         ;
  227 000000FC         ; This routine simply sets the RS signal &&
  228 000000FC         ; calls WRITE_BYTE.
  229 000000FC         ;
  230 000000FC         ;*******************************************************
                       ***********************  
  231 000000FC         WRITE_COMMAND
                               PROC
  232 000000FC                 EXPORT           WRITE_COMMAND     [WEAK]
  233 000000FC         
  234 000000FC         ; 4-bit commands
  235 000000FC B53F            PUSH             {r0-r5, LR}
  236 000000FE         
  237 000000FE 9C07            LDR              r4, [SP, #28] ; r4 holds nybble
                                                            s to write
  238 00000100         
  239 00000100 F04F 0000       LDR              r0, =SET_LOW
  240 00000104 B401            PUSH             {r0}
  241 00000106 F7FF FFFE       BL               SET_RS      ; RS as LOW (write 
                                                            to command reg)
  242 0000010A BC01            POP              {r0}
  243 0000010C         
  244 0000010C         
  245 0000010C B410            PUSH             {r4}
  246 0000010E F7FF FFFE       BL               DELAY_2_MS



ARM Macro Assembler    Page 6 


  247 00000112 F7FF FFFE       BL               WRITE_BYTE
  248 00000116 F7FF FFFE       BL               DELAY_2_MS
  249 0000011A BC10            POP              {r4}
  250 0000011C         
  251 0000011C BD3F            POP              {r0-r5, PC}
  252 0000011E         
  253 0000011E                 ENDP
  254 0000011E         
  255 0000011E         ;*******************************************************
                       ***********************  
  256 0000011E         ; Writes a data byte (ex: 0x00)
  257 0000011E         ; to the LCD Keypad Shield
  258 0000011E         ;
  259 0000011E         ; void WRITE_DATA(uint_32 value)
  260 0000011E         ;    ~similar to write_command
  261 0000011E         ;
  262 0000011E         ; r4 contains
  263 0000011E         ;   the value to write. 
  264 0000011E         ;
  265 0000011E         ; This routine simply sets the RS signal &&
  266 0000011E         ; calls WRITE_BYTE.
  267 0000011E         ;*******************************************************
                       ***********************  
  268 0000011E         WRITE_DATA
                               PROC
  269 0000011E                 EXPORT           WRITE_DATA     [WEAK]
  270 0000011E         
  271 0000011E B53F            PUSH             {r0-r5, LR}
  272 00000120         
  273 00000120 9C07            LDR              r4, [SP, #28] ; r4 holds nybble
                                                            s to write
  274 00000122         
  275 00000122 F04F 0001       LDR              r0, =SET_HIGH
  276 00000126 B401            PUSH             {r0}
  277 00000128 F7FF FFFE       BL               SET_RS      ; RS as HIGH (write
                                                             to data reg)
  278 0000012C BC01            POP              {r0}
  279 0000012E         
  280 0000012E         
  281 0000012E B410            PUSH             {r4}
  282 00000130 F7FF FFFE       BL               DELAY_2_MS
  283 00000134 F7FF FFFE       BL               WRITE_BYTE
  284 00000138 F7FF FFFE       BL               DELAY_2_MS
  285 0000013C BC10            POP              {r4}
  286 0000013E         
  287 0000013E BD3F            POP              {r0-r5, PC}
  288 00000140         
  289 00000140                 ENDP
  290 00000140         
  291 00000140         ;*******************************************************
                       ***********************  
  292 00000140         ; Writes a byte to the LCD Keypad Shield
  293 00000140         ;
  294 00000140         ; void WRITE_BYTE(uint_32 value)
  295 00000140         ;
  296 00000140         ; r4 contains
  297 00000140         ;    the value to write. 
  298 00000140         ;
  299 00000140         ; We should set the RS signal before 



ARM Macro Assembler    Page 7 


  300 00000140         ; calling this routine (Done in WRITE_DATA). 
  301 00000140         ;
  302 00000140         ; Setting RS to LOW 
  303 00000140         ; gives us a command && 
  304 00000140         ; setting RS to HIGH
  305 00000140         ; gives us a data command. 
  306 00000140         ;
  307 00000140         ; Since our LCD Keypad Shield is using a 4-bit interface
                        
  308 00000140         ; we need to send out the MS nybble first 
  309 00000140         ; followed by the LS nybble.
  310 00000140         ;*******************************************************
                       ***********************  
  311 00000140         WRITE_BYTE
                               PROC
  312 00000140                 EXPORT           WRITE_BYTE     [WEAK]
  313 00000140         
  314 00000140 B53F            PUSH             {r0-r5, LR}
  315 00000142         
  316 00000142 9C07            LDR              r4, [SP, #28] ; r4 holds nybble
                                                            s to write
  317 00000144         
  318 00000144 EA4F 1114       LSR              r1, r4, #4  ; upper nybble
  319 00000148 B402            PUSH             {r1}
  320 0000014A F7FF FFFE       BL               WRITE_LS_NYBBLE
  321 0000014E BC02            POP              {r1}
  322 00000150         
  323 00000150 F004 020F       AND              r2, r4, #0x0F ; lower nybble
  324 00000154 B404            PUSH             {r2}
  325 00000156 F7FF FFFE       BL               WRITE_LS_NYBBLE
  326 0000015A BC04            POP              {r2}
  327 0000015C         
  328 0000015C BD3F            POP              {r0-r5, PC}
  329 0000015E         
  330 0000015E                 ENDP
  331 0000015E         
  332 0000015E         ;*******************************************************
                       ***********************  
  333 0000015E         ; Writes the LS nybble to the LCD Keypad Shield.
  334 0000015E         ;
  335 0000015E         ; void WRITE_LS_NYBBLE(uint_32 value)
  336 0000015E         ;
  337 0000015E         ; r4 contains
  338 0000015E         ;    the value to write. 
  339 0000015E         ;
  340 0000015E         ; It is assumed that the RS line has already
  341 0000015E         ; been set to the proper value. 
  342 0000015E         ;
  343 0000015E         ; Be sure to set E to HIGH, 
  344 0000015E         ; output the data, &&
  345 0000015E         ; set E to LOW 
  346 0000015E         ; to write the data to the LCD Keypad Shield.
  347 0000015E         ;*******************************************************
                       ***********************  
  348 0000015E         WRITE_LS_NYBBLE
                               PROC
  349 0000015E                 EXPORT           WRITE_LS_NYBBLE     [WEAK]
  350 0000015E         
  351 0000015E B53F            PUSH             {r0-r5, LR}



ARM Macro Assembler    Page 8 


  352 00000160         
  353 00000160 F04F 0001       LDR              r0, =SET_HIGH
  354 00000164 B401            PUSH             {r0}
  355 00000166 F7FF FFFE       BL               SET_E       ; E as HIGH, ready 
                                                            to output data (D7-
                                                            D4)
  356 0000016A BC01            POP              {r0}
  357 0000016C         
  358 0000016C 9C07            LDR              r4, [SP, #28] ; r4 holds UPPER 
                                                            || LOWER nybble to 
                                                            write
  359 0000016E 4830            LDR              r0, =GPIO_BASE
  360 00000170         
  361 00000170 F004 0106       AND              r1, r4, #0x6 ; Port 5 spots: 1[
                                                            11]1
  362 00000174 F04F 0200       LDR              r2, =0x0    ; used for SETx
  363 00000178 F04F 0300       LDR              r3, =0x0    ; used for CLRx
  364 0000017C EA4F 0151       LSR              r1, r1, #1
  365 00000180 0849            LSRS             r1, r1, #1
  366 00000182 BF2C 1C52       ADDCS            r2, r2, #0x1 ; D5 ~ @P5[0]
  367 00000186 1C5B            ADDCC            r3, r3, #0x1 ; first pin spot 
  368 00000188 0849            LSRS             r1, r1, #1
  369 0000018A BF2C 1C92       ADDCS            r2, r2, #0x2 ; D6 ~ @P5[1]
  370 0000018E 1C9B            ADDCC            r3, r3, #0x2 ; second pin spot
  371 00000190 F8C0 20B8       STR              r2, [r0, #SET5]
  372 00000194 F8C0 30BC       STR              r3, [r0, #CLR5]
  373 00000198         
  374 00000198         
  375 00000198 F004 0109       AND              r1, r4, #0x9 ; Port 0 spots: [0
                                                            ]00[0]
  376 0000019C F04F 0200       LDR              r2, =0x0    ; used for SETx
  377 000001A0 F04F 0300       LDR              r3, =0x0    ; used for CLRx
  378 000001A4 0849            LSRS             r1, r1, #1
  379 000001A6 BF2C 3220       ADDCS            r2, r2, #0x20 ; D4 ~ @P0[5]
  380 000001AA 3320            ADDCC            r3, r3, #0x20 ; sixth pin spot
  381 000001AC EA4F 0191       LSR              r1, r1, #2
  382 000001B0 0849            LSRS             r1, r1, #1
  383 000001B2 BF2C 3210       ADDCS            r2, r2, #0x10 ; D7 ~ @P0[4]
  384 000001B6 3310            ADDCC            r3, r3, #0x10 ; fifth pin spot
  385 000001B8 6182            STR              r2, [r0, #SET0]
  386 000001BA 61C3            STR              r3, [r0, #CLR0]
  387 000001BC         
  388 000001BC F04F 0000       LDR              r0, =SET_LOW
  389 000001C0 B401            PUSH             {r0}
  390 000001C2 F7FF FFFE       BL               SET_E       ; E as LOW, sends d
                                                            ata (D7-D4)
  391 000001C6 BC01            POP              {r0}
  392 000001C8         
  393 000001C8 BD3F            POP              {r0-r5, PC}
  394 000001CA         
  395 000001CA                 ENDP
  396 000001CA         
  397 000001CA         ;*******************************************************
                       ***********************  
  398 000001CA         ; Sets the RS data line to the value passed.
  399 000001CA         ;
  400 000001CA         ; void SET_RS(uint_32 status)
  401 000001CA         ;
  402 000001CA         ; r4 contains 



ARM Macro Assembler    Page 9 


  403 000001CA         ;   the value to set RS. 
  404 000001CA         ;
  405 000001CA         ; RS is bit P5.3 which is already set to output.
  406 000001CA         ;*******************************************************
                       ***********************  
  407 000001CA         SET_RS  PROC
  408 000001CA                 EXPORT           SET_RS     [WEAK]
  409 000001CA         
  410 000001CA B53F            PUSH             {r0-r5, LR}
  411 000001CC         
  412 000001CC 9C07            LDR              r4, [SP, #28] ; r4 holds SET_HI
                                                            GH || SET_LOW
  413 000001CE 4818            LDR              r0, =GPIO_BASE ; RS ~ P5[3]
  414 000001D0 F04F 0108       LDR              r1, =0x8    ; fourth pin
  415 000001D4         
  416 000001D4 2C01            CMP              r4, #SET_HIGH
  417 000001D6 BF0C F8C0 
              10B8             STREQ            r1, [r0, #SET5]
  418 000001DC F8C0 10BC       STRNE            r1, [r0, #CLR5]
  419 000001E0         
  420 000001E0 BD3F            POP              {r0-r5, PC}
  421 000001E2         
  422 000001E2                 ENDP
  423 000001E2         
  424 000001E2         ;*******************************************************
                       ***********************  
  425 000001E2         ; Sets the E data line to the value passed.
  426 000001E2         ;
  427 000001E2         ; void SET_E(uint_32 status)
  428 000001E2         ;
  429 000001E2         ; r4 contains
  430 000001E2         ;   the value to set E. 
  431 000001E2         ;
  432 000001E2         ; E is bit P5.4 which is already set to output.
  433 000001E2         ;*******************************************************
                       ***********************  
  434 000001E2         SET_E   PROC
  435 000001E2                 EXPORT           SET_E     [WEAK]
  436 000001E2         
  437 000001E2 B53F            PUSH             {r0-r5, LR}
  438 000001E4         
  439 000001E4 9C07            LDR              r4, [SP, #28] ; r4 holds ON || 
                                                            OFF
  440 000001E6 4812            LDR              r0, =GPIO_BASE ; E ~ P5[4]: 0x4
                                                            002 C290 (Type I)
  441 000001E8 F04F 0110       LDR              r1, =0x10   ; sixth pin
  442 000001EC         
  443 000001EC 2C01            CMP              r4, #SET_HIGH
  444 000001EE BF0C F8C0 
              10B8             STREQ            r1, [r0, #SET5]
  445 000001F4 F8C0 10BC       STRNE            r1, [r0, #CLR5]
  446 000001F8         
  447 000001F8 BD3F            POP              {r0-r5, PC}
  448 000001FA         
  449 000001FA                 ENDP
  450 000001FA         
  451 000001FA         ;*******************************************************
                       ***********************  
  452 000001FA         ; Turns on || off the LCD backlight. 



ARM Macro Assembler    Page 10 


  453 000001FA         ;
  454 000001FA         ; The parameter status is passed on the stack.
  455 000001FA         ;
  456 000001FA         ; void LCD_BACKLIGHT(int status)
  457 000001FA         ;
  458 000001FA         ; status - 1 turn on backlight, 
  459 000001FA         ;   - 0 turn off backlight
  460 000001FA         ;*******************************************************
                       ***********************  
  461 000001FA         LCD_BACKLIGHT
                               PROC
  462 000001FA                 EXPORT           LCD_BACKLIGHT     [WEAK]
  463 000001FA         
  464 000001FA B53F            PUSH             {r0-r5, LR}
  465 000001FC         
  466 000001FC 9807            LDR              r0, [SP, #28] ; r0 holds ON || 
                                                            OFF
  467 000001FE 490C            LDR              r1, =GPIO_BASE ; Backlight ~ P0
                                                            [6]: 0x4002 C018
  468 00000200 F04F 0240       LDR              r2, =0x40
  469 00000204         
  470 00000204 2801            CMP              r0, #SET_HIGH
  471 00000206 BF0C 618A       STREQ            r2, [r1, #SET0]
  472 0000020A 61CA            STRNE            r2, [r1, #CLR0]
  473 0000020C         
  474 0000020C BD3F            POP              {r0-r5, PC}
  475 0000020E         
  476 0000020E                 ENDP
  477 0000020E         
  478 0000020E                 END
              00 00 4002C014 
              4002C280 
              4002C284 
              4002C010 
              4002C28C 
              4002C290 
              4002C018 
              4002C05C 
              20098000 
              00800070 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\lcd.d -o.\objects\lcd.o -I.\RTE\_LPC_4088 -IC:\Keil_v
5\ARM\PACK\Keil\LPC4000_DFP\2.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include
 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 525" --predefi
ne="CORE_M4 SETA 1" --list=.\listings\lcd.lst lcd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LCDCODE 00000000

Symbol: LCDCODE
   Definitions
      At line 44 in file lcd.s
   Uses
      None
Comment: LCDCODE unused
LCD_BACKLIGHT 000001FA

Symbol: LCD_BACKLIGHT
   Definitions
      At line 461 in file lcd.s
   Uses
      At line 462 in file lcd.s
Comment: LCD_BACKLIGHT used once
LCD_INIT 00000000

Symbol: LCD_INIT
   Definitions
      At line 69 in file lcd.s
   Uses
      At line 70 in file lcd.s
Comment: LCD_INIT used once
OUT 000000FA

Symbol: OUT
   Definitions
      At line 212 in file lcd.s
   Uses
      At line 200 in file lcd.s
Comment: OUT used once
SET_E 000001E2

Symbol: SET_E
   Definitions
      At line 434 in file lcd.s
   Uses
      At line 355 in file lcd.s
      At line 390 in file lcd.s
      At line 435 in file lcd.s

SET_RS 000001CA

Symbol: SET_RS
   Definitions
      At line 407 in file lcd.s
   Uses
      At line 241 in file lcd.s
      At line 277 in file lcd.s
      At line 408 in file lcd.s

WRITE_BYTE 00000140

Symbol: WRITE_BYTE
   Definitions
      At line 311 in file lcd.s
   Uses
      At line 247 in file lcd.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 283 in file lcd.s
      At line 312 in file lcd.s

WRITE_COMMAND 000000FC

Symbol: WRITE_COMMAND
   Definitions
      At line 231 in file lcd.s
   Uses
      At line 110 in file lcd.s
      At line 116 in file lcd.s
      At line 122 in file lcd.s
      At line 128 in file lcd.s
      At line 134 in file lcd.s
      At line 141 in file lcd.s
      At line 147 in file lcd.s
      At line 153 in file lcd.s
      At line 189 in file lcd.s
      At line 232 in file lcd.s

WRITE_CSTRING 000000C2

Symbol: WRITE_CSTRING
   Definitions
      At line 178 in file lcd.s
   Uses
      At line 179 in file lcd.s
Comment: WRITE_CSTRING used once
WRITE_DATA 0000011E

Symbol: WRITE_DATA
   Definitions
      At line 268 in file lcd.s
   Uses
      At line 197 in file lcd.s
      At line 269 in file lcd.s

WRITE_LS_NYBBLE 0000015E

Symbol: WRITE_LS_NYBBLE
   Definitions
      At line 348 in file lcd.s
   Uses
      At line 320 in file lcd.s
      At line 325 in file lcd.s
      At line 349 in file lcd.s

first_line 000000E0

Symbol: first_line
   Definitions
      At line 193 in file lcd.s
   Uses
      At line 202 in file lcd.s
Comment: first_line used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BACKLIGHT_OFF 00000000

Symbol: BACKLIGHT_OFF
   Definitions
      At line 29 in file lcd.s
   Uses
      None
Comment: BACKLIGHT_OFF unused
BACKLIGHT_ON 00000001

Symbol: BACKLIGHT_ON
   Definitions
      At line 28 in file lcd.s
   Uses
      None
Comment: BACKLIGHT_ON unused
CLR0 0000001C

Symbol: CLR0
   Definitions
      At line 35 in file lcd.s
   Uses
      At line 386 in file lcd.s
      At line 472 in file lcd.s

CLR1 0000003C

Symbol: CLR1
   Definitions
      At line 36 in file lcd.s
   Uses
      None
Comment: CLR1 unused
CLR5 000000BC

Symbol: CLR5
   Definitions
      At line 38 in file lcd.s
   Uses
      At line 372 in file lcd.s
      At line 418 in file lcd.s
      At line 445 in file lcd.s

DIR0 00000000

Symbol: DIR0
   Definitions
      At line 41 in file lcd.s
   Uses
      At line 102 in file lcd.s
Comment: DIR0 used once
DIR5 000000A0

Symbol: DIR5
   Definitions
      At line 42 in file lcd.s
   Uses
      At line 104 in file lcd.s
Comment: DIR5 used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

GPIO_BASE 20098000

Symbol: GPIO_BASE
   Definitions
      At line 33 in file lcd.s
   Uses
      At line 100 in file lcd.s
      At line 359 in file lcd.s
      At line 413 in file lcd.s
      At line 440 in file lcd.s
      At line 467 in file lcd.s

SET0 00000018

Symbol: SET0
   Definitions
      At line 34 in file lcd.s
   Uses
      At line 385 in file lcd.s
      At line 471 in file lcd.s

SET5 000000B8

Symbol: SET5
   Definitions
      At line 37 in file lcd.s
   Uses
      At line 371 in file lcd.s
      At line 417 in file lcd.s
      At line 444 in file lcd.s

SET_HIGH 00000001

Symbol: SET_HIGH
   Definitions
      At line 31 in file lcd.s
   Uses
      At line 275 in file lcd.s
      At line 353 in file lcd.s
      At line 416 in file lcd.s
      At line 443 in file lcd.s
      At line 470 in file lcd.s

SET_LOW 00000000

Symbol: SET_LOW
   Definitions
      At line 30 in file lcd.s
   Uses
      At line 239 in file lcd.s
      At line 388 in file lcd.s

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DELAY_15_MS 00000000

Symbol: DELAY_15_MS
   Definitions
      At line 48 in file lcd.s
   Uses
      At line 112 in file lcd.s
      At line 118 in file lcd.s
      At line 124 in file lcd.s
      At line 130 in file lcd.s
      At line 136 in file lcd.s
      At line 143 in file lcd.s
      At line 149 in file lcd.s
      At line 155 in file lcd.s

DELAY_1_MS 00000000

Symbol: DELAY_1_MS
   Definitions
      At line 45 in file lcd.s
   Uses
      None
Comment: DELAY_1_MS unused
DELAY_20_MS 00000000

Symbol: DELAY_20_MS
   Definitions
      At line 49 in file lcd.s
   Uses
      At line 74 in file lcd.s
      At line 75 in file lcd.s
      At line 106 in file lcd.s

DELAY_2_MS 00000000

Symbol: DELAY_2_MS
   Definitions
      At line 46 in file lcd.s
   Uses
      At line 188 in file lcd.s
      At line 190 in file lcd.s
      At line 196 in file lcd.s
      At line 198 in file lcd.s
      At line 246 in file lcd.s
      At line 248 in file lcd.s
      At line 282 in file lcd.s
      At line 284 in file lcd.s

DELAY_5_MS 00000000

Symbol: DELAY_5_MS
   Definitions
      At line 47 in file lcd.s
   Uses
      None
Comment: DELAY_5_MS unused
5 symbols
365 symbols in table
